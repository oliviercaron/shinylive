---
format:
  html:
    light: yeti
filters:
  - shinylive
title: "Systematic literature review"
title-block-banner: true
subtitle: "A focus on authors, articles, references with networks"
author:
  - name: Olivier Caron
    email: olivier.caron@dauphine.psl.eu
    affiliations: 
      name: "Paris Dauphine - PSL"
      city: Paris
      state: France
  - name: Christophe Benavent
    email: christophe.benavent@dauphine.psl.eu
    affiliations: 
      name: "Paris Dauphine - PSL"
      city: Paris
      state: France
date : "last-modified"
toc: true
---

## 
:::{.column-page}
```{shinylive-python}
#| standalone: true
#| viewerHeight: 600
#| viewerWidth: 600

#to transform into revealjs presentation, write into yaml under "html"
#slide-number: c/t
#width: 1600
#height: 900

from shiny import App, Inputs, Outputs, Session, render, ui
import pandas as pd

# Create User Interface
app_ui = ui.page_fluid(
    ui.row(
        ui.column(4, ui.input_text("start_year", "Start Year:", "2013")),
        ui.column(4, ui.input_text("end_year", "End Year:", "2020")),
        ui.column(4, ui.input_file("csv_file", "Upload your CSV file:", multiple=False, accept=[".csv"])),
        ui.column(4 ,ui.input_checkbox("header", "Header", True))
    ),
    ui.output_text_verbatim("value1"),
    ui.output_text_verbatim("value2"),
    ui.output_text_verbatim("file_info"),
    ui.output_text_verbatim("first_rows"),
    ui.output_text_verbatim("value3"),
    ui.output_ui("contents")
)

# Server logic
def server(input: Inputs, output: Outputs, session: Session):

    # Global DataFrame to store the uploaded file data
    global_df = None

    @output
    @render.text
    def value1():
        return f"Start Year: {input.start_year()}"

    @output
    @render.text
    def value2():
        return f"End Year: {input.end_year()}"
    
    @output
    @render.text
    def value3():
        try:
            difference = int(input.end_year()) - int(input.start_year())
            return f"Difference: {difference}"
        except ValueError:  # Will catch if either of the values can't be converted to integers
            return "Invalid input: please enter numerical years."

    @output
    @render.text
    def file_info():
        global global_df
        uploaded_files = input.csv_file()
        if uploaded_files:
            file_info = uploaded_files[0]
            global_df = pd.read_csv(file_info['datapath'], sep=';', decimal=',')
            return f"File uploaded: {file_info['name']} of type {file_info['type']} and size {file_info['size']} bytes."
        else:
            return "No file uploaded"
            
    @output
    @render.text
    def first_row():
        nonlocal global_df  # Declare nonlocal to access the outer variable
        if global_df is not None:
            return str(global_df.head(1).to_dict())  # Convert the first row to a dictionary and then to a string
        else:
            return "No data available"
    
    @output
    @render.ui
    def contents():
        if input.csv_file() is None:
            return "Please upload a csv file"
        f: list[FileInfo] = input.csv_file()
        df = pd.read_csv(f[0]["datapath"], sep=';', decimal=',', header=0 if input.header() else None)
        return ui.HTML(df.to_html(classes="table table-striped"))

# Initialize Shiny App
app = App(app_ui, server)


```
:::

## Just a test

```{r}
#| label: libraries-data

cowsay::say("Hello world!")
```

## Graph

```{=html}
<iframe width="1400" height="800" src="docs/2013_2017_sigma_test.html" title="Sigma graph" frameborder=0 class="column-page-inset"></iframe>
```
